// This file automatically generated by template-converter:
//    /usr/bin/template-converter TemplateVars /devel/source/Myelin/src/Generator/template.tpl /devel/source/Myelin/src/Generator/generated/TemplateVars.h
//
// DO NOT EDIT!

#ifndef TEMPLATEVARS_H_
#define TEMPLATEVARS_H_

#include <string>

const std::string TemplateVars (
"\n"
"#include <Myelin/Myelin.h>\n"
"{{#HEADERS}}\n"
"#include <{{HEADER}}>{{/HEADERS}}\n"
"\n"
"\n"
"{{#NAMESPACES}}\n"
"namespace {{NAMESPACE}} {\n"
"namespace {{NAMESPACE}}Introspection {\n"
"\n"
"void declare_namespace (Myelin::Repository* repo)\n"
"{\n"
"	Myelin::Namespace* nspace = 0;\n"
"	Myelin::Class* klass = 0;\n"
"	\n"
"	\n"
"	/* get namespace */\n"
"	nspace = repo->getNamespace (\"{{NAMESPACE}}\");\n"
"	\n"
"{{#CLASSES}}\n"
"	/* register class type */\n"
"	klass = new Myelin::Class (\"{{CLASS}}\");\n"
"	nspace->addClass (klass);\n"
"	\n"
"	Myelin::REGISTER_CLASS ({{CLASS}}, klass);\n"
"	klass->setType (Myelin::TYPE({{CLASS}}));\n"
"	\n"
"	/* register class function types */\n"
"	{{#FUNCTIONS}}klass->addFunction (new Myelin::Function (\"{{NAME}}\", new Myelin::{{#CONSTANT}}Const{{/CONSTANT}}MemberFunctionType{{PARAM_COUNT}} <{{CLASS}}, {{RETURN}}{{#PARAMS}}, {{TYPE}}{{/PARAMS}}> (&{{CLASS}}::{{NAME}}){{#CONSTANT}}, Myelin::Function::CONSTANT{{/CONSTANT}}));\n"
"	{{/FUNCTIONS}}\n"
"{{/CLASSES}}\n"
"}\n"
"\n"
"}}\n"
"{{/NAMESPACES}}\n"
"\n"
"\n"
"#if defined _WIN32 || defined __CYGWIN__ \n"
"	#define MYELIN_ENTRY_EXPORT __declspec(dllexport)\n"
"#else\n"
"	#if __GNUC__ >= 4\n"
"		#define MYELIN_ENTRY_EXPORT __attribute__ ((visibility(\"default\")))\n"
"	#else\n"
"		#define MYELIN_ENTRY_EXPORT\n"
"	#endif\n"
"#endif\n"
"\n"
"extern \"C\" MYELIN_ENTRY_EXPORT Myelin::Repository* myelin_create_repository ()\n"
"{\n"
"	Myelin::Repository* repo = new Myelin::Repository (\"{{REPO}}\");\n"
"	\n"
"	{{#NAMESPACES}}\n"
"	/* declare namespaces */\n"
"	{{NAMESPACE}}::{{NAMESPACE}}Introspection::declare_namespace (repo);\n"
"	{{/NAMESPACES}}\n"
"	\n"
"	return repo;\n"
"}\n"
"\n"
);

#endif /* TEMPLATEVARS_H_ */
