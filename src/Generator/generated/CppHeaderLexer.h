/** \file
 *  This C header file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : /devel/source/Myelin/src/Generator/CppHeader.g
 *     -                            On : 2013-03-18 20:13:56
 *     -                 for the lexer : CppHeaderLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
CppHeaderLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCppHeaderLexer, which is returned from a call to CppHeaderLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pCppHeaderLexer are  as follows:
 *
 *  - 
 void
      pCppHeaderLexer->TOKEN_AMPERSAND(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_ASTERIX(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_BACKSLASH(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_COLON(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_COMMA(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_EQUALS(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_EXCLAMATION(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_FORWARD_SLASH(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_GREATER_THAN(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_HASH(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_LBRACE(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_LBRACKET(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_LESS_THAN(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_LPAREN(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_PERIOD(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_PIPE(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_RBRACE(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_RBRACKET(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_RPAREN(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_SEMICOL(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->TOKEN_TILDE(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__59(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__60(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__61(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__62(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__63(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__64(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__65(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__66(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__67(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__68(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__69(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__70(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__71(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->T__72(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->ID(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->INT(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->COMMENT(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->PREPROCESSOR(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->WS(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->STRING(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->CHAR(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->EXPONENT(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->HEX_DIGIT(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->ESC_SEQ(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->OCTAL_ESC(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->UNICODE_ESC(pCppHeaderLexer)
 *  - 
 void
      pCppHeaderLexer->Tokens(pCppHeaderLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CppHeaderLexer_H
#define _CppHeaderLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CppHeaderLexer_Ctx_struct CppHeaderLexer, * pCppHeaderLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
CppHeaderLexer

 */
struct CppHeaderLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mTOKEN_AMPERSAND)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_ASTERIX)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_BACKSLASH)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_COLON)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_COMMA)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EQUALS)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EXCLAMATION)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_FORWARD_SLASH)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_GREATER_THAN)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_HASH)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_LBRACE)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_LBRACKET)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_LESS_THAN)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_LPAREN)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PERIOD)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PIPE)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_RBRACE)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_RBRACKET)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_RPAREN)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SEMICOL)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTOKEN_TILDE)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mPREPROCESSOR)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct CppHeaderLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct CppHeaderLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CppHeaderLexer_Ctx_struct * ctx);
    void	    (*free)   (struct CppHeaderLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCppHeaderLexer CppHeaderLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pCppHeaderLexer CppHeaderLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define CHAR      4
#define COMMENT      5
#define ESC_SEQ      6
#define EXPONENT      7
#define HEX_DIGIT      8
#define ID      9
#define INT      10
#define NODE_CLASS      11
#define NODE_CONSTRUCTOR      12
#define NODE_DESTRUCTOR      13
#define NODE_ENUMERATION      14
#define NODE_FUNCTION      15
#define NODE_FUNCTION_PTR      16
#define NODE_FUNCTION_SPECIFIER      17
#define NODE_NAMESPACE      18
#define NODE_PARAMETER      19
#define NODE_POINTER      20
#define NODE_PRIMITIVE      21
#define NODE_REFERENCE      22
#define NODE_SOURCE      23
#define NODE_STORAGE_CLASS      24
#define NODE_STORAGE_QUALIFIER      25
#define NODE_STRUCTURE      26
#define NODE_TEMPLATE      27
#define NODE_TEMPLATE_PARAMS      28
#define NODE_TYPE      29
#define NODE_TYPEDEF      30
#define NODE_TYPE_NAME      31
#define NODE_UNION      32
#define OCTAL_ESC      33
#define PREPROCESSOR      34
#define STRING      35
#define TOKEN_AMPERSAND      36
#define TOKEN_ASTERIX      37
#define TOKEN_BACKSLASH      38
#define TOKEN_COLON      39
#define TOKEN_COMMA      40
#define TOKEN_EQUALS      41
#define TOKEN_EXCLAMATION      42
#define TOKEN_FORWARD_SLASH      43
#define TOKEN_GREATER_THAN      44
#define TOKEN_HASH      45
#define TOKEN_LBRACE      46
#define TOKEN_LBRACKET      47
#define TOKEN_LESS_THAN      48
#define TOKEN_LPAREN      49
#define TOKEN_PERIOD      50
#define TOKEN_PIPE      51
#define TOKEN_RBRACE      52
#define TOKEN_RBRACKET      53
#define TOKEN_RPAREN      54
#define TOKEN_SEMICOL      55
#define TOKEN_TILDE      56
#define UNICODE_ESC      57
#define WS      58
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CppHeaderLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
